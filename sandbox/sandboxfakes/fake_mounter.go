// Code generated by counterfeiter. DO NOT EDIT.
package sandboxfakes

import (
	"sync"

	"code.cloudfoundry.org/winc/sandbox"
)

type FakeMounter struct {
	SetPointStub        func(string, string) error
	setPointMutex       sync.RWMutex
	setPointArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setPointReturns struct {
		result1 error
	}
	setPointReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePointStub        func(string) error
	deletePointMutex       sync.RWMutex
	deletePointArgsForCall []struct {
		arg1 string
	}
	deletePointReturns struct {
		result1 error
	}
	deletePointReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounter) SetPoint(arg1 string, arg2 string) error {
	fake.setPointMutex.Lock()
	ret, specificReturn := fake.setPointReturnsOnCall[len(fake.setPointArgsForCall)]
	fake.setPointArgsForCall = append(fake.setPointArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SetPoint", []interface{}{arg1, arg2})
	fake.setPointMutex.Unlock()
	if fake.SetPointStub != nil {
		return fake.SetPointStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setPointReturns.result1
}

func (fake *FakeMounter) SetPointCallCount() int {
	fake.setPointMutex.RLock()
	defer fake.setPointMutex.RUnlock()
	return len(fake.setPointArgsForCall)
}

func (fake *FakeMounter) SetPointArgsForCall(i int) (string, string) {
	fake.setPointMutex.RLock()
	defer fake.setPointMutex.RUnlock()
	return fake.setPointArgsForCall[i].arg1, fake.setPointArgsForCall[i].arg2
}

func (fake *FakeMounter) SetPointReturns(result1 error) {
	fake.SetPointStub = nil
	fake.setPointReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) SetPointReturnsOnCall(i int, result1 error) {
	fake.SetPointStub = nil
	if fake.setPointReturnsOnCall == nil {
		fake.setPointReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setPointReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) DeletePoint(arg1 string) error {
	fake.deletePointMutex.Lock()
	ret, specificReturn := fake.deletePointReturnsOnCall[len(fake.deletePointArgsForCall)]
	fake.deletePointArgsForCall = append(fake.deletePointArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeletePoint", []interface{}{arg1})
	fake.deletePointMutex.Unlock()
	if fake.DeletePointStub != nil {
		return fake.DeletePointStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deletePointReturns.result1
}

func (fake *FakeMounter) DeletePointCallCount() int {
	fake.deletePointMutex.RLock()
	defer fake.deletePointMutex.RUnlock()
	return len(fake.deletePointArgsForCall)
}

func (fake *FakeMounter) DeletePointArgsForCall(i int) string {
	fake.deletePointMutex.RLock()
	defer fake.deletePointMutex.RUnlock()
	return fake.deletePointArgsForCall[i].arg1
}

func (fake *FakeMounter) DeletePointReturns(result1 error) {
	fake.DeletePointStub = nil
	fake.deletePointReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) DeletePointReturnsOnCall(i int, result1 error) {
	fake.DeletePointStub = nil
	if fake.deletePointReturnsOnCall == nil {
		fake.deletePointReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePointReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setPointMutex.RLock()
	defer fake.setPointMutex.RUnlock()
	fake.deletePointMutex.RLock()
	defer fake.deletePointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sandbox.Mounter = new(FakeMounter)

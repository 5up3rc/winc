// This file was generated by counterfeiter
package sandboxfakes

import (
	"sync"

	"code.cloudfoundry.org/winc/sandbox"
)

type FakeSandboxManager struct {
	CreateStub        func(rootfs string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		rootfs string
	}
	createReturns struct {
		result1 error
	}
	DeleteStub        func() error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct{}
	deleteReturns     struct {
		result1 error
	}
	BundlePathStub        func() string
	bundlePathMutex       sync.RWMutex
	bundlePathArgsForCall []struct{}
	bundlePathReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSandboxManager) Create(rootfs string) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		rootfs string
	}{rootfs})
	fake.recordInvocation("Create", []interface{}{rootfs})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(rootfs)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeSandboxManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeSandboxManager) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].rootfs
}

func (fake *FakeSandboxManager) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) Delete() error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct{}{})
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub()
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeSandboxManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSandboxManager) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) BundlePath() string {
	fake.bundlePathMutex.Lock()
	fake.bundlePathArgsForCall = append(fake.bundlePathArgsForCall, struct{}{})
	fake.recordInvocation("BundlePath", []interface{}{})
	fake.bundlePathMutex.Unlock()
	if fake.BundlePathStub != nil {
		return fake.BundlePathStub()
	} else {
		return fake.bundlePathReturns.result1
	}
}

func (fake *FakeSandboxManager) BundlePathCallCount() int {
	fake.bundlePathMutex.RLock()
	defer fake.bundlePathMutex.RUnlock()
	return len(fake.bundlePathArgsForCall)
}

func (fake *FakeSandboxManager) BundlePathReturns(result1 string) {
	fake.BundlePathStub = nil
	fake.bundlePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSandboxManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.bundlePathMutex.RLock()
	defer fake.bundlePathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSandboxManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sandbox.SandboxManager = new(FakeSandboxManager)

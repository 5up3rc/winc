// Code generated by counterfeiter. DO NOT EDIT.
package networkfakes

import (
	"sync"

	"code.cloudfoundry.org/winc/network"
)

type FakeNetShRunner struct {
	RunContainerStub        func([]string) error
	runContainerMutex       sync.RWMutex
	runContainerArgsForCall []struct {
		arg1 []string
	}
	runContainerReturns struct {
		result1 error
	}
	runContainerReturnsOnCall map[int]struct {
		result1 error
	}
	RunHostStub        func([]string) ([]byte, error)
	runHostMutex       sync.RWMutex
	runHostArgsForCall []struct {
		arg1 []string
	}
	runHostReturns struct {
		result1 []byte
		result2 error
	}
	runHostReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetShRunner) RunContainer(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.runContainerMutex.Lock()
	ret, specificReturn := fake.runContainerReturnsOnCall[len(fake.runContainerArgsForCall)]
	fake.runContainerArgsForCall = append(fake.runContainerArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("RunContainer", []interface{}{arg1Copy})
	fake.runContainerMutex.Unlock()
	if fake.RunContainerStub != nil {
		return fake.RunContainerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runContainerReturns.result1
}

func (fake *FakeNetShRunner) RunContainerCallCount() int {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return len(fake.runContainerArgsForCall)
}

func (fake *FakeNetShRunner) RunContainerArgsForCall(i int) []string {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return fake.runContainerArgsForCall[i].arg1
}

func (fake *FakeNetShRunner) RunContainerReturns(result1 error) {
	fake.RunContainerStub = nil
	fake.runContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetShRunner) RunContainerReturnsOnCall(i int, result1 error) {
	fake.RunContainerStub = nil
	if fake.runContainerReturnsOnCall == nil {
		fake.runContainerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runContainerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetShRunner) RunHost(arg1 []string) ([]byte, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.runHostMutex.Lock()
	ret, specificReturn := fake.runHostReturnsOnCall[len(fake.runHostArgsForCall)]
	fake.runHostArgsForCall = append(fake.runHostArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("RunHost", []interface{}{arg1Copy})
	fake.runHostMutex.Unlock()
	if fake.RunHostStub != nil {
		return fake.RunHostStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.runHostReturns.result1, fake.runHostReturns.result2
}

func (fake *FakeNetShRunner) RunHostCallCount() int {
	fake.runHostMutex.RLock()
	defer fake.runHostMutex.RUnlock()
	return len(fake.runHostArgsForCall)
}

func (fake *FakeNetShRunner) RunHostArgsForCall(i int) []string {
	fake.runHostMutex.RLock()
	defer fake.runHostMutex.RUnlock()
	return fake.runHostArgsForCall[i].arg1
}

func (fake *FakeNetShRunner) RunHostReturns(result1 []byte, result2 error) {
	fake.RunHostStub = nil
	fake.runHostReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeNetShRunner) RunHostReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.RunHostStub = nil
	if fake.runHostReturnsOnCall == nil {
		fake.runHostReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.runHostReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeNetShRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	fake.runHostMutex.RLock()
	defer fake.runHostMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetShRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ network.NetShRunner = new(FakeNetShRunner)

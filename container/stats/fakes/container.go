// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/container/stats"
	"github.com/Microsoft/hcsshim"
)

type Container struct {
	StatisticsStub        func() (hcsshim.Statistics, error)
	statisticsMutex       sync.RWMutex
	statisticsArgsForCall []struct{}
	statisticsReturns     struct {
		result1 hcsshim.Statistics
		result2 error
	}
	statisticsReturnsOnCall map[int]struct {
		result1 hcsshim.Statistics
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Container) Statistics() (hcsshim.Statistics, error) {
	fake.statisticsMutex.Lock()
	ret, specificReturn := fake.statisticsReturnsOnCall[len(fake.statisticsArgsForCall)]
	fake.statisticsArgsForCall = append(fake.statisticsArgsForCall, struct{}{})
	fake.recordInvocation("Statistics", []interface{}{})
	fake.statisticsMutex.Unlock()
	if fake.StatisticsStub != nil {
		return fake.StatisticsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statisticsReturns.result1, fake.statisticsReturns.result2
}

func (fake *Container) StatisticsCallCount() int {
	fake.statisticsMutex.RLock()
	defer fake.statisticsMutex.RUnlock()
	return len(fake.statisticsArgsForCall)
}

func (fake *Container) StatisticsReturns(result1 hcsshim.Statistics, result2 error) {
	fake.StatisticsStub = nil
	fake.statisticsReturns = struct {
		result1 hcsshim.Statistics
		result2 error
	}{result1, result2}
}

func (fake *Container) StatisticsReturnsOnCall(i int, result1 hcsshim.Statistics, result2 error) {
	fake.StatisticsStub = nil
	if fake.statisticsReturnsOnCall == nil {
		fake.statisticsReturnsOnCall = make(map[int]struct {
			result1 hcsshim.Statistics
			result2 error
		})
	}
	fake.statisticsReturnsOnCall[i] = struct {
		result1 hcsshim.Statistics
		result2 error
	}{result1, result2}
}

func (fake *Container) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.statisticsMutex.RLock()
	defer fake.statisticsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Container) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stats.Container = new(Container)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/container"
)

type ProcessManager struct {
	ContainerPidStub        func(string) (int, error)
	containerPidMutex       sync.RWMutex
	containerPidArgsForCall []struct {
		arg1 string
	}
	containerPidReturns struct {
		result1 int
		result2 error
	}
	containerPidReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProcessManager) ContainerPid(arg1 string) (int, error) {
	fake.containerPidMutex.Lock()
	ret, specificReturn := fake.containerPidReturnsOnCall[len(fake.containerPidArgsForCall)]
	fake.containerPidArgsForCall = append(fake.containerPidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ContainerPid", []interface{}{arg1})
	fake.containerPidMutex.Unlock()
	if fake.ContainerPidStub != nil {
		return fake.ContainerPidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.containerPidReturns.result1, fake.containerPidReturns.result2
}

func (fake *ProcessManager) ContainerPidCallCount() int {
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	return len(fake.containerPidArgsForCall)
}

func (fake *ProcessManager) ContainerPidArgsForCall(i int) string {
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	return fake.containerPidArgsForCall[i].arg1
}

func (fake *ProcessManager) ContainerPidReturns(result1 int, result2 error) {
	fake.ContainerPidStub = nil
	fake.containerPidReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *ProcessManager) ContainerPidReturnsOnCall(i int, result1 int, result2 error) {
	fake.ContainerPidStub = nil
	if fake.containerPidReturnsOnCall == nil {
		fake.containerPidReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.containerPidReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *ProcessManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProcessManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ container.ProcessManager = new(ProcessManager)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"syscall"

	"code.cloudfoundry.org/winc/container"
)

type ProcessClient struct {
	StartTimeStub        func(pid uint32) (syscall.Filetime, error)
	startTimeMutex       sync.RWMutex
	startTimeArgsForCall []struct {
		pid uint32
	}
	startTimeReturns struct {
		result1 syscall.Filetime
		result2 error
	}
	startTimeReturnsOnCall map[int]struct {
		result1 syscall.Filetime
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProcessClient) StartTime(pid uint32) (syscall.Filetime, error) {
	fake.startTimeMutex.Lock()
	ret, specificReturn := fake.startTimeReturnsOnCall[len(fake.startTimeArgsForCall)]
	fake.startTimeArgsForCall = append(fake.startTimeArgsForCall, struct {
		pid uint32
	}{pid})
	fake.recordInvocation("StartTime", []interface{}{pid})
	fake.startTimeMutex.Unlock()
	if fake.StartTimeStub != nil {
		return fake.StartTimeStub(pid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.startTimeReturns.result1, fake.startTimeReturns.result2
}

func (fake *ProcessClient) StartTimeCallCount() int {
	fake.startTimeMutex.RLock()
	defer fake.startTimeMutex.RUnlock()
	return len(fake.startTimeArgsForCall)
}

func (fake *ProcessClient) StartTimeArgsForCall(i int) uint32 {
	fake.startTimeMutex.RLock()
	defer fake.startTimeMutex.RUnlock()
	return fake.startTimeArgsForCall[i].pid
}

func (fake *ProcessClient) StartTimeReturns(result1 syscall.Filetime, result2 error) {
	fake.StartTimeStub = nil
	fake.startTimeReturns = struct {
		result1 syscall.Filetime
		result2 error
	}{result1, result2}
}

func (fake *ProcessClient) StartTimeReturnsOnCall(i int, result1 syscall.Filetime, result2 error) {
	fake.StartTimeStub = nil
	if fake.startTimeReturnsOnCall == nil {
		fake.startTimeReturnsOnCall = make(map[int]struct {
			result1 syscall.Filetime
			result2 error
		})
	}
	fake.startTimeReturnsOnCall[i] = struct {
		result1 syscall.Filetime
		result2 error
	}{result1, result2}
}

func (fake *ProcessClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startTimeMutex.RLock()
	defer fake.startTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProcessClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ container.ProcessClient = new(ProcessClient)

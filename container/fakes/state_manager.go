// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/container"
	"code.cloudfoundry.org/winc/container/state"
	specs "github.com/opencontainers/runtime-spec/specs-go"
)

type StateManager struct {
	GetStub        func() (*specs.State, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct{}
	getReturns     struct {
		result1 *specs.State
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *specs.State
		result2 error
	}
	InitializeStub        func(string) error
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		arg1 string
	}
	initializeReturns struct {
		result1 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 error
	}
	SetRunningStub        func(int) error
	setRunningMutex       sync.RWMutex
	setRunningArgsForCall []struct {
		arg1 int
	}
	setRunningReturns struct {
		result1 error
	}
	setRunningReturnsOnCall map[int]struct {
		result1 error
	}
	SetExecFailedStub        func() error
	setExecFailedMutex       sync.RWMutex
	setExecFailedArgsForCall []struct{}
	setExecFailedReturns     struct {
		result1 error
	}
	setExecFailedReturnsOnCall map[int]struct {
		result1 error
	}
	WriteContainerStateStub        func(state.ContainerState) error
	writeContainerStateMutex       sync.RWMutex
	writeContainerStateArgsForCall []struct {
		arg1 state.ContainerState
	}
	writeContainerStateReturns struct {
		result1 error
	}
	writeContainerStateReturnsOnCall map[int]struct {
		result1 error
	}
	ContainerPidStub        func(id string) (int, error)
	containerPidMutex       sync.RWMutex
	containerPidArgsForCall []struct {
		id string
	}
	containerPidReturns struct {
		result1 int
		result2 error
	}
	containerPidReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StateManager) Get() (*specs.State, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct{}{})
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *StateManager) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *StateManager) GetReturns(result1 *specs.State, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *specs.State
		result2 error
	}{result1, result2}
}

func (fake *StateManager) GetReturnsOnCall(i int, result1 *specs.State, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *specs.State
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *specs.State
		result2 error
	}{result1, result2}
}

func (fake *StateManager) Initialize(arg1 string) error {
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Initialize", []interface{}{arg1})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		return fake.InitializeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.initializeReturns.result1
}

func (fake *StateManager) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *StateManager) InitializeArgsForCall(i int) string {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return fake.initializeArgsForCall[i].arg1
}

func (fake *StateManager) InitializeReturns(result1 error) {
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) InitializeReturnsOnCall(i int, result1 error) {
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) SetRunning(arg1 int) error {
	fake.setRunningMutex.Lock()
	ret, specificReturn := fake.setRunningReturnsOnCall[len(fake.setRunningArgsForCall)]
	fake.setRunningArgsForCall = append(fake.setRunningArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("SetRunning", []interface{}{arg1})
	fake.setRunningMutex.Unlock()
	if fake.SetRunningStub != nil {
		return fake.SetRunningStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setRunningReturns.result1
}

func (fake *StateManager) SetRunningCallCount() int {
	fake.setRunningMutex.RLock()
	defer fake.setRunningMutex.RUnlock()
	return len(fake.setRunningArgsForCall)
}

func (fake *StateManager) SetRunningArgsForCall(i int) int {
	fake.setRunningMutex.RLock()
	defer fake.setRunningMutex.RUnlock()
	return fake.setRunningArgsForCall[i].arg1
}

func (fake *StateManager) SetRunningReturns(result1 error) {
	fake.SetRunningStub = nil
	fake.setRunningReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) SetRunningReturnsOnCall(i int, result1 error) {
	fake.SetRunningStub = nil
	if fake.setRunningReturnsOnCall == nil {
		fake.setRunningReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRunningReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) SetExecFailed() error {
	fake.setExecFailedMutex.Lock()
	ret, specificReturn := fake.setExecFailedReturnsOnCall[len(fake.setExecFailedArgsForCall)]
	fake.setExecFailedArgsForCall = append(fake.setExecFailedArgsForCall, struct{}{})
	fake.recordInvocation("SetExecFailed", []interface{}{})
	fake.setExecFailedMutex.Unlock()
	if fake.SetExecFailedStub != nil {
		return fake.SetExecFailedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setExecFailedReturns.result1
}

func (fake *StateManager) SetExecFailedCallCount() int {
	fake.setExecFailedMutex.RLock()
	defer fake.setExecFailedMutex.RUnlock()
	return len(fake.setExecFailedArgsForCall)
}

func (fake *StateManager) SetExecFailedReturns(result1 error) {
	fake.SetExecFailedStub = nil
	fake.setExecFailedReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) SetExecFailedReturnsOnCall(i int, result1 error) {
	fake.SetExecFailedStub = nil
	if fake.setExecFailedReturnsOnCall == nil {
		fake.setExecFailedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setExecFailedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) WriteContainerState(arg1 state.ContainerState) error {
	fake.writeContainerStateMutex.Lock()
	ret, specificReturn := fake.writeContainerStateReturnsOnCall[len(fake.writeContainerStateArgsForCall)]
	fake.writeContainerStateArgsForCall = append(fake.writeContainerStateArgsForCall, struct {
		arg1 state.ContainerState
	}{arg1})
	fake.recordInvocation("WriteContainerState", []interface{}{arg1})
	fake.writeContainerStateMutex.Unlock()
	if fake.WriteContainerStateStub != nil {
		return fake.WriteContainerStateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeContainerStateReturns.result1
}

func (fake *StateManager) WriteContainerStateCallCount() int {
	fake.writeContainerStateMutex.RLock()
	defer fake.writeContainerStateMutex.RUnlock()
	return len(fake.writeContainerStateArgsForCall)
}

func (fake *StateManager) WriteContainerStateArgsForCall(i int) state.ContainerState {
	fake.writeContainerStateMutex.RLock()
	defer fake.writeContainerStateMutex.RUnlock()
	return fake.writeContainerStateArgsForCall[i].arg1
}

func (fake *StateManager) WriteContainerStateReturns(result1 error) {
	fake.WriteContainerStateStub = nil
	fake.writeContainerStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) WriteContainerStateReturnsOnCall(i int, result1 error) {
	fake.WriteContainerStateStub = nil
	if fake.writeContainerStateReturnsOnCall == nil {
		fake.writeContainerStateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeContainerStateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateManager) ContainerPid(id string) (int, error) {
	fake.containerPidMutex.Lock()
	ret, specificReturn := fake.containerPidReturnsOnCall[len(fake.containerPidArgsForCall)]
	fake.containerPidArgsForCall = append(fake.containerPidArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("ContainerPid", []interface{}{id})
	fake.containerPidMutex.Unlock()
	if fake.ContainerPidStub != nil {
		return fake.ContainerPidStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.containerPidReturns.result1, fake.containerPidReturns.result2
}

func (fake *StateManager) ContainerPidCallCount() int {
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	return len(fake.containerPidArgsForCall)
}

func (fake *StateManager) ContainerPidArgsForCall(i int) string {
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	return fake.containerPidArgsForCall[i].id
}

func (fake *StateManager) ContainerPidReturns(result1 int, result2 error) {
	fake.ContainerPidStub = nil
	fake.containerPidReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *StateManager) ContainerPidReturnsOnCall(i int, result1 int, result2 error) {
	fake.ContainerPidStub = nil
	if fake.containerPidReturnsOnCall == nil {
		fake.containerPidReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.containerPidReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *StateManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.setRunningMutex.RLock()
	defer fake.setRunningMutex.RUnlock()
	fake.setExecFailedMutex.RLock()
	defer fake.setExecFailedMutex.RUnlock()
	fake.writeContainerStateMutex.RLock()
	defer fake.writeContainerStateMutex.RUnlock()
	fake.containerPidMutex.RLock()
	defer fake.containerPidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StateManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ container.StateManager = new(StateManager)

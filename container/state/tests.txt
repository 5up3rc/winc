//		Context("when getting container pid fails", func() {
//			BeforeEach(func() {
//				hcsClient.OpenContainerReturns(nil, errors.New("couldn't get pid"))
//				hcsClient.GetContainerPropertiesReturnsOnCall(1, hcsshim.ContainerProperties{Stopped: false}, nil)
//			})
//
//			It("deletes the container", func() {
//				_, err := containerManager.Create(bundlePath)
//				Expect(err).To(MatchError("couldn't get pid"))
//
//				Expect(fakeContainer.ShutdownCallCount()).To(Equal(1))
//			})
//		})

	})

	Context("when the specified container does not exist", func() {
		var missingContainerError = errors.New("container does not exist")

		BeforeEach(func() {
			hcsClient.GetContainerPropertiesReturns(hcsshim.ContainerProperties{}, missingContainerError)
		})

		It("errors", func() {
			_, err := containerManager.State()
			Expect(err).To(Equal(missingContainerError))
		})
	})
